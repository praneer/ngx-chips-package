{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-chips/core/pipes/highlight.pipe.ts","ng://ngx-chips/core/constants/index.ts","ng://ngx-chips/core/providers/drag-provider.ts","ng://ngx-chips/defaults.ts","ng://ngx-chips/core/providers/options-provider.ts","ng://ngx-chips/core/accessor.ts","ng://ngx-chips/core/helpers/listen.ts","ng://ngx-chips/components/tag-input-form/tag-input-form.component.ts","ng://ngx-chips/components/tag/tag-ripple.component.ts","ng://ngx-chips/components/tag/tag.component.ts","ng://ngx-chips/components/tag-input/animations.ts","ng://ngx-chips/components/dropdown/tag-input-dropdown.component.ts","ng://ngx-chips/components/tag-input/tag-input.ts","ng://ngx-chips/components/icon/icon.ts","ng://ngx-chips/tag-input.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__read","o","m","ar","error","HighlightPipe","transform","arg","trim","regex","RegExp","replace","Pipe","name","KEYDOWN","KEYUP","ACTIONS_KEYS","KEY_PRESS_ACTIONS","8","46","37","39","9","DragProvider","state","dragging","dropping","index","undefined","setDraggedItem","event","tag","dataTransfer","setData","JSON","stringify","getDraggedItem","data","getData","parse","_a","setSender","sender","setReceiver","receiver","onTagDropped","indexDragged","indexDropped","onDragEnd","onRemoveRequested","onAddingRequested","setState","getState","Injectable","defaults","tagInput","separatorKeys","separatorKeyCodes","maxItems","Infinity","placeholder","secondaryPlaceholder","validators","asyncValidators","onlyFromAutocomplete","errorMessages","theme","onTextChangeDebounce","inputId","inputClass","clearOnBlur","hideForm","addOnBlur","addOnPaste","pasteSplitPattern","blinkIfDupe","removable","editable","allowDupes","modelAsStrings","trimTags","ripple","tabIndex","disable","dragZone","onRemoving","onAdding","displayBy","identifyBy","animationDuration","enter","leave","dropdown","appendToBody","offset","focusFirstElement","showDropdownIfEmpty","minimumTextLength","limitItemsTo","keepOpen","dynamicUpdate","zIndex","matchingFn","targetValue","toString","toLowerCase","indexOf","OptionsProvider","setOptions","options","isObject","obj","TagInputAccessor","_items","items","_onChangeCallback","onTouched","_onTouchedCallback","writeValue","registerOnChange","fn","registerOnTouched","getItemValue","item","fromDropdown","property","getItemDisplay","getItemsWithout","filter","position","tslib_1.__decorate","Input","listen","listenerType","action","condition","listeners","Error","TagInputForm","onSubmit","EventEmitter","onBlur","onFocus","onKeyup","onKeydown","inputTextChange","tabindex","disabled","FormControl","text","_inputText","setValue","emit","ngOnInit","setValidators","setAsyncValidators","form","FormGroup","ngOnChanges","changes","firstChange","currentValue","controls","enable","get","isInputFocused","doc","document","activeElement","input","nativeElement","getErrorMessages","messages","_this","keys","err","hasError","map","hasErrors","dirty","valid","focus","blur","getElementPosition","getBoundingClientRect","destroy","parentElement","removeChild","onKeyDown","$event","submit","onKeyUp","inputText","preventDefault","reset","Output","ViewChild","static","Component","selector","template","TagRipple","animations","trigger","style","width","opacity","transition","animate","keyframes","borderRadius","navigator","window","userAgent","vendor","isChrome","test","TagComponent","element","renderer","cdRef","onSelect","onRemove","onTagEdited","editing","rippleState","model","readonly","select","stopPropagation","remove","move","moving","keydown","keyCode","disableEditMode","blink","classList","add","setTimeout","toggleEditMode","activateEditMode","onBlurred","innerText","getDisplayValue","hasRipple","getContentEditableText","storeNewValue","detectChanges","setContentEditableText","isDeleteIconVisible","getContentEditable","canAddTag","querySelector","TemplateRef","HostBinding","HostListener","ElementRef","Renderer2","ChangeDetectorRef","TagInputDropdown","injector","TagInputComponent","_autocompleteItems","show","maxItemsReached","getFormValue","hasMinimumText","calculatePosition","getMatchingItems","hasItems","isHidden","isVisible","isDisabled","shouldShow","shouldHide","autocompleteObservable","getItemsFromObservable","hide","setItems","requestAdding","createTagModel","catch","resetItems","setLoadingState","pipe","first","subscribe","populateItems","ngAfterViewInit","onItemClicked","onHide","KEEP_OPEN","onTextChange","asObservable","distinctUntilChanged","debounceTime","updatePosition","inputForm","menu","dropdownState","menuState","selectedItem","scrollListener","onWindowBlur","formValue","display","dupesAllowed","autocompleteItems","hasValue","tags","some","slice","isLoading","Ng2Dropdown","ContentChildren","QueryList","Injector","CUSTOM_ACCESSOR","DragEvent","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","_super","dragProvider","onAdd","onPaste","onValidationError","constants.KEYDOWN","constants.KEYUP","inputTextValue","errors","appendTag","concat","__spread","createTag","val","isTagValid","fromAutocomplete","dupe","findDupe","find","isFromAutocomplete","assertions","Boolean","onPasteCallback","isIE","clipboardData","type","getText","requests","split","setInputValue","resetInput","all","__","constructor","create","tslib_1.__extends","setUpKeypressListeners","setupSeparatorKeysListener","setUpInputKeydownListeners","observers","setUpTextChangeSubscriber","setUpOnBlurSubscriber","setUpOnPasteListener","statusChanges$","statusChanges","status","isProgressBarVisible$","console","warn","setAnimationMetadata","subscribeFn","removeItem","giveupFocus","addItem","selectItem","selectedTag","fireEvents","eventName","forEach","listener","handleKeydown","which","shiftKey","constants.KEY_PRESS_ACTIONS","constants.ACTIONS_KEYS","moveToTag","isFirstTag","isLastTag","onFormSubmit","_b","emitEvent","getControl","applyFocus","displayAutocomplete","hasCustomTemplate","templates","menuTemplate","onDragStarted","zone","onDragOver","isDropping","isReceiver","onTagBlurred","changedElement","trackBy","updateEditedTag","direction","isLast","isFirst","getTagIndex","getTagAtIndex","last","toArray","findIndex","appendItem","statusUpdate","useSeparatorKeys","hasKeyCode","hasKey","isIMEProcessing","valueChanges","id","animationMetadata","params","ContentChild","descendants","ViewChildren","providers","DeleteIconComponent","optionsProvider","TagInputModule","withDefaults","NgModule","imports","CommonModule","ReactiveFormsModule","FormsModule","Ng2DropdownModule","declarations","exports","COMPOSITION_BUFFER_MODE","useValue"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\n\r\nconst escape = s => s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n\r\n@Pipe({\r\n    name: 'highlight'\r\n})\r\nexport class HighlightPipe implements PipeTransform {\r\n    /**\r\n     * @name transform\r\n     * @param value {string}\r\n     * @param arg {string}\r\n     */\r\n    public transform(value: string, arg: string): string {\r\n        if (!arg.trim()) {\r\n            return value;\r\n        }\r\n\r\n        try {\r\n            const regex = new RegExp(`(${escape(arg)})`, 'i');\r\n            return value.replace(regex, '<b>$1</b>');\r\n        } catch (e) {\r\n            return value;\r\n        }\r\n    }\r\n}\r\n","/*\r\n** constants and default values for <tag-input>\r\n */\r\n\r\nexport const PLACEHOLDER = '+ Tag';\r\nexport const SECONDARY_PLACEHOLDER = 'Enter a new tag';\r\nexport const KEYDOWN = 'keydown';\r\nexport const KEYUP = 'keyup';\r\nexport const FOCUS = 'focus';\r\nexport const MAX_ITEMS_WARNING = 'The number of items specified was greater than the property max-items.';\r\n\r\nexport const ACTIONS_KEYS = {\r\n    DELETE: 'DELETE',\r\n    SWITCH_PREV: 'SWITCH_PREV',\r\n    SWITCH_NEXT: 'SWITCH_NEXT',\r\n    TAB: 'TAB'\r\n};\r\n\r\nexport const KEY_PRESS_ACTIONS = {\r\n    8: ACTIONS_KEYS.DELETE,\r\n    46: ACTIONS_KEYS.DELETE,\r\n    37: ACTIONS_KEYS.SWITCH_PREV,\r\n    39: ACTIONS_KEYS.SWITCH_NEXT,\r\n    9: ACTIONS_KEYS.TAB\r\n};\r\n\r\nexport const DRAG_AND_DROP_KEY = 'Text';\r\nexport const NEXT = 'NEXT';\r\nexport const PREV = 'PREV';\r\n\r\n","import { TagInputComponent } from '../../components/tag-input/tag-input';\r\nimport { TagModel } from '../accessor';\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\nexport declare interface DraggedTag {\r\n    index: number;\r\n    tag: TagModel;\r\n    zone: string;\r\n}\r\n\r\nimport { DRAG_AND_DROP_KEY } from '../../core/constants';\r\n\r\nexport declare interface State {\r\n    dragging: boolean;\r\n    dropping: boolean;\r\n    index: number | undefined;\r\n}\r\n\r\nexport declare type StateProperty = keyof State;\r\n\r\n@Injectable()\r\nexport class DragProvider {\r\n    public sender: TagInputComponent;\r\n    public receiver: TagInputComponent;\r\n\r\n    public state: State = {\r\n        dragging: false,\r\n        dropping: false,\r\n        index: undefined\r\n    };\r\n\r\n    /**\r\n     * @name setDraggedItem\r\n     * @param event\r\n     * @param tag\r\n     */\r\n    public setDraggedItem(event: DragEvent, tag: DraggedTag): void {\r\n        if (event && event.dataTransfer) {\r\n            event.dataTransfer.setData(DRAG_AND_DROP_KEY, JSON.stringify(tag));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name getDraggedItem\r\n     * @param event\r\n     */\r\n    public getDraggedItem(event: DragEvent): DraggedTag | undefined {\r\n        if (event && event.dataTransfer) {\r\n            const data = event.dataTransfer.getData(DRAG_AND_DROP_KEY);\r\n            try {\r\n                return JSON.parse(data) as DraggedTag;\r\n            } catch {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name setSender\r\n     * @param sender\r\n     */\r\n    public setSender(sender: TagInputComponent): void {\r\n        this.sender = sender;\r\n    }\r\n\r\n    /**\r\n     * @name setReceiver\r\n     * @param receiver\r\n     */\r\n    public setReceiver(receiver: TagInputComponent): void {\r\n        this.receiver = receiver;\r\n    }\r\n\r\n    /**\r\n     * @name onTagDropped\r\n     * @param tag\r\n     * @param indexDragged\r\n     * @param indexDropped\r\n     */\r\n    public onTagDropped(tag: TagModel, indexDragged: number, indexDropped?: number): void {\r\n        this.onDragEnd();\r\n\r\n        this.sender.onRemoveRequested(tag, indexDragged);\r\n        this.receiver.onAddingRequested(false, tag, indexDropped);\r\n    }\r\n\r\n    /**\r\n     * @name setState\r\n     * @param state\r\n     */\r\n    public setState(state: { [K in StateProperty]?: State[K] }): void {\r\n        this.state = { ...this.state, ...state };\r\n    }\r\n\r\n    /**\r\n     * @name getState\r\n     * @param key\r\n     */\r\n    public getState(key?: StateProperty): State | State[StateProperty] {\r\n        return key ? this.state[key] : this.state;\r\n    }\r\n\r\n    /**\r\n     * @name onDragEnd\r\n     */\r\n    public onDragEnd(): void {\r\n        this.setState({\r\n            dragging: false,\r\n            dropping: false,\r\n            index: undefined\r\n        });\r\n    }\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { ValidatorFn, AsyncValidatorFn } from '@angular/forms';\r\n\r\nimport { SECONDARY_PLACEHOLDER, PLACEHOLDER } from './core/constants/index';\r\nimport { TagInputDropdown } from './components/dropdown/tag-input-dropdown.component';\r\nimport { TagModel } from './core/accessor';\r\n\r\nexport interface TagInputOptions {\r\n    separatorKeys: string[];\r\n    separatorKeyCodes: number[];\r\n    maxItems: number;\r\n    placeholder: string;\r\n    secondaryPlaceholder: string;\r\n    validators: ValidatorFn[];\r\n    asyncValidators: AsyncValidatorFn[];\r\n    onlyFromAutocomplete: boolean;\r\n    errorMessages: { [key: string]: string; };\r\n    theme: '';\r\n    onTextChangeDebounce: number;\r\n    inputId: string | null;\r\n    inputClass: string;\r\n    clearOnBlur: boolean;\r\n    hideForm: boolean;\r\n    addOnBlur: boolean;\r\n    addOnPaste: boolean;\r\n    pasteSplitPattern: string | RegExp;\r\n    blinkIfDupe: boolean;\r\n    removable: boolean;\r\n    editable: boolean;\r\n    allowDupes: boolean;\r\n    modelAsStrings: boolean;\r\n    trimTags: boolean;\r\n    ripple: boolean;\r\n    tabIndex: string;\r\n    disable: boolean;\r\n    dragZone: string;\r\n    onRemoving?: (tag: TagModel) => Observable<TagModel>;\r\n    onAdding?: (tag: TagModel) => Observable<TagModel>;\r\n    displayBy: string;\r\n    identifyBy: string;\r\n    animationDuration: {\r\n        enter: string,\r\n        leave: string\r\n    };\r\n}\r\n\r\nexport interface TagInputDropdownOptions {\r\n    displayBy: string;\r\n    identifyBy: string;\r\n    appendToBody: boolean;\r\n    offset: string;\r\n    focusFirstElement: boolean;\r\n    showDropdownIfEmpty: boolean;\r\n    minimumTextLength: number;\r\n    limitItemsTo: number;\r\n    keepOpen: boolean;\r\n    zIndex: number;\r\n    dynamicUpdate: boolean;\r\n    matchingFn: (value: string, target: TagModel) => boolean;\r\n}\r\n\r\nexport const defaults = {\r\n    tagInput: <TagInputOptions>{\r\n        separatorKeys: [],\r\n        separatorKeyCodes: [],\r\n        maxItems: Infinity,\r\n        placeholder: PLACEHOLDER,\r\n        secondaryPlaceholder: SECONDARY_PLACEHOLDER,\r\n        validators: [],\r\n        asyncValidators: [],\r\n        onlyFromAutocomplete: false,\r\n        errorMessages: {},\r\n        theme: '',\r\n        onTextChangeDebounce: 250,\r\n        inputId: null,\r\n        inputClass: '',\r\n        clearOnBlur: false,\r\n        hideForm: false,\r\n        addOnBlur: false,\r\n        addOnPaste: false,\r\n        pasteSplitPattern: ',',\r\n        blinkIfDupe: true,\r\n        removable: true,\r\n        editable: false,\r\n        allowDupes: false,\r\n        modelAsStrings: false,\r\n        trimTags: true,\r\n        ripple: true,\r\n        tabIndex: '',\r\n        disable: false,\r\n        dragZone: '',\r\n        onRemoving: undefined,\r\n        onAdding: undefined,\r\n        displayBy: 'display',\r\n        identifyBy: 'value',\r\n        animationDuration: {\r\n            enter: '250ms',\r\n            leave: '150ms'\r\n        }\r\n    },\r\n    dropdown: <TagInputDropdownOptions>{\r\n        displayBy: 'display',\r\n        identifyBy: 'value',\r\n        appendToBody: true,\r\n        offset: '50 0',\r\n        focusFirstElement: false,\r\n        showDropdownIfEmpty: false,\r\n        minimumTextLength: 1,\r\n        limitItemsTo: Infinity,\r\n        keepOpen: true,\r\n        dynamicUpdate: true,\r\n        zIndex: 1000,\r\n        matchingFn\r\n    }\r\n};\r\n\r\n/**\r\n * @name matchingFn\r\n * @param this\r\n * @param value\r\n * @param target\r\n */\r\nfunction matchingFn(this: TagInputDropdown, value: string, target: TagModel): boolean {\r\n    const targetValue = target[this.displayBy].toString();\r\n\r\n    return targetValue && targetValue\r\n        .toLowerCase()\r\n        .indexOf(value.toLowerCase()) >= 0;\r\n}\r\n","import { defaults, TagInputOptions, TagInputDropdownOptions } from '../../defaults';\r\n\r\nexport type Options = {\r\n    tagInput?: {\r\n        [P in keyof TagInputOptions]?: TagInputOptions[P];\r\n    };\r\n    dropdown?: {\r\n        [P in keyof TagInputDropdownOptions]?: TagInputDropdownOptions[P];\r\n    }\r\n};\r\n\r\nexport class OptionsProvider {\r\n    public static defaults = defaults;\r\n\r\n    public setOptions(options: Options): void {\r\n        OptionsProvider.defaults.tagInput = {...defaults.tagInput, ...options.tagInput};\r\n        OptionsProvider.defaults.dropdown = {...defaults.dropdown, ...options.dropdown};\r\n    }\r\n}\r\n\r\nexport { TagInputDropdownOptions, TagInputOptions };\r\n","import { ControlValueAccessor } from '@angular/forms';\r\nimport { Input } from '@angular/core';\r\nimport { OptionsProvider } from './providers/options-provider';\r\nimport { TagInputDropdown } from '../components/dropdown/tag-input-dropdown.component';\r\n\r\nexport class TagModelClass {\r\n    [key: string]: any;\r\n}\r\n\r\nexport type TagModel = string | TagModelClass;\r\n\r\nexport function isObject(obj: any): boolean {\r\n    return obj === Object(obj);\r\n}\r\n\r\nexport class TagInputAccessor implements ControlValueAccessor {\r\n    private _items: TagModel[] = [];\r\n    private _onTouchedCallback: () => void;\r\n    private _onChangeCallback: (items: TagModel[]) => void;\r\n\r\n    public dropdown: TagInputDropdown;\r\n\r\n    /**\r\n     * @name displayBy\r\n     */\r\n    @Input() public displayBy: string = OptionsProvider.defaults.tagInput.displayBy;\r\n\r\n    /**\r\n     * @name identifyBy\r\n     */\r\n    @Input() public identifyBy: string = OptionsProvider.defaults.tagInput.identifyBy;\r\n\r\n    public get items(): TagModel[] {\r\n        return this._items;\r\n    }\r\n\r\n    public set items(items: TagModel[]) {\r\n        this._items = items;\r\n        this._onChangeCallback(this._items);\r\n    }\r\n\r\n    public onTouched() {\r\n        this._onTouchedCallback();\r\n    }\r\n\r\n    public writeValue(items: any[]) {\r\n        this._items = items || [];\r\n    }\r\n\r\n    public registerOnChange(fn: any) {\r\n        this._onChangeCallback = fn;\r\n    }\r\n\r\n    public registerOnTouched(fn: any) {\r\n        this._onTouchedCallback = fn;\r\n    }\r\n\r\n    /**\r\n     * @name getItemValue\r\n     * @param item\r\n     * @param fromDropdown\r\n     */\r\n    public getItemValue(item: TagModel, fromDropdown = false): string {\r\n        const property = fromDropdown && this.dropdown ? this.dropdown.identifyBy : this.identifyBy;\r\n        return isObject(item) ? item[property] : item;\r\n    }\r\n\r\n    /**\r\n     * @name getItemDisplay\r\n     * @param item\r\n     * @param fromDropdown\r\n     */\r\n    public getItemDisplay(item: TagModel, fromDropdown = false): string {\r\n        const property = fromDropdown && this.dropdown ? this.dropdown.displayBy : this.displayBy;\r\n        return isObject(item) ? item[property] : item;\r\n    }\r\n\r\n    /**\r\n     * @name getItemsWithout\r\n     * @param index\r\n     */\r\n    protected getItemsWithout(index: number): TagModel[] {\r\n        return this.items.filter((item, position) => position !== index);\r\n    }\r\n}\r\n","\r\n/**\r\n * @name listen\r\n * @param listenerType\r\n * @param action\r\n * @param condition\r\n */\r\nexport function listen(listenerType: string, action: () => any, condition = true): void {\r\n    // if the event provided does not exist, throw an error\r\n    if (!this.listeners.hasOwnProperty(listenerType)) {\r\n        throw new Error('The event entered may be wrong');\r\n    }\r\n\r\n    // if a condition is present and is false, exit early\r\n    if (!condition) {\r\n        return;\r\n    }\r\n\r\n    // fire listener\r\n    this.listeners[listenerType].push(action);\r\n}\r\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { AsyncValidatorFn, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'tag-input-form',\r\n    styleUrls: ['./tag-input-form.style.scss'],\r\n    templateUrl: './tag-input-form.template.html'\r\n})\r\nexport class TagInputForm implements OnInit, OnChanges {\r\n    /**\r\n     * @name onSubmit\r\n     */\r\n    @Output() public onSubmit: EventEmitter<any> = new EventEmitter();\r\n\r\n    /**\r\n     * @name onBlur\r\n     */\r\n    @Output() public onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n    /**\r\n     * @name onFocus\r\n     */\r\n    @Output() public onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n    /**\r\n     * @name onKeyup\r\n     */\r\n    @Output() public onKeyup: EventEmitter<any> = new EventEmitter();\r\n\r\n    /**\r\n     * @name onKeydown\r\n     */\r\n    @Output() public onKeydown: EventEmitter<any> = new EventEmitter();\r\n\r\n    /**\r\n     * @name inputTextChange\r\n     */\r\n    @Output() public inputTextChange: EventEmitter<string> = new EventEmitter();\r\n\r\n    // inputs\r\n\r\n    /**\r\n     * @name placeholder\r\n     */\r\n    @Input() public placeholder: string;\r\n\r\n    /**\r\n     * @name validators\r\n     */\r\n    @Input() public validators: ValidatorFn[] = [];\r\n\r\n    /**\r\n     * @name asyncValidators\r\n     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\r\n     */\r\n    @Input() public asyncValidators: AsyncValidatorFn[] = [];\r\n\r\n    /**\r\n     * @name inputId\r\n     */\r\n    @Input() public inputId: string;\r\n\r\n    /**\r\n     * @name inputClass\r\n     */\r\n    @Input() public inputClass: string;\r\n\r\n    /**\r\n     * @name tabindex\r\n     * @desc pass through the specified tabindex to the input\r\n     */\r\n    @Input() public tabindex = '';\r\n\r\n    /**\r\n     * @name disabled\r\n     */\r\n    @Input() public disabled = false;\r\n\r\n    /**\r\n     * @name input\r\n     */\r\n    @ViewChild('input', { static: false }) public input;\r\n\r\n    /**\r\n     * @name form\r\n     */\r\n    public form: FormGroup;\r\n\r\n    /**\r\n     * @name inputText\r\n     */\r\n    @Input()\r\n    public get inputText(): string {\r\n        return this.item.value;\r\n    }\r\n\r\n    private _inputText: string;\r\n\r\n    /**\r\n     * @name inputText\r\n     * @param text {string}\r\n     */\r\n    public set inputText(text: string) {\r\n        if ( this._inputText != text ) {\r\n            this._inputText = text;\r\n            this.item.setValue(text);\r\n            this.inputTextChange.emit(text);\r\n        }\r\n    }\r\n\r\n    private readonly item: FormControl = new FormControl({ value: '', disabled: this.disabled });\r\n\r\n    ngOnInit() {\r\n        this.item.setValidators(this.validators);\r\n        this.item.setAsyncValidators(this.asyncValidators);\r\n\r\n        // creating form\r\n        this.form = new FormGroup({\r\n            item: this.item\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.disabled && !changes.disabled.firstChange) {\r\n            if (changes.disabled.currentValue) {\r\n                this.form.controls['item'].disable();\r\n            } else {\r\n                this.form.controls['item'].enable();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name value\r\n     */\r\n    public get value(): FormControl {\r\n        return this.form.get('item') as FormControl;\r\n    }\r\n\r\n    /**\r\n     * @name isInputFocused\r\n     */\r\n    public isInputFocused(): boolean {\r\n        const doc = typeof document !== 'undefined' ? document : undefined;\r\n        return doc ? doc.activeElement === this.input.nativeElement : false;\r\n    }\r\n\r\n    /**\r\n     * @name getErrorMessages\r\n     * @param messages\r\n     */\r\n    public getErrorMessages(messages: { [key: string]: string }): string[] {\r\n        return Object.keys(messages)\r\n            .filter(err => this.value.hasError(err))\r\n            .map(err => messages[err]);\r\n    }\r\n\r\n    /**\r\n     * @name hasErrors\r\n     */\r\n    public hasErrors(): boolean {\r\n        const { dirty, value, valid } = this.form;\r\n        return dirty && value.item && !valid;\r\n    }\r\n\r\n    /**\r\n     * @name focus\r\n     */\r\n    public focus(): void {\r\n        this.input.nativeElement.focus();\r\n    }\r\n\r\n    /**\r\n     * @name blur\r\n     */\r\n    public blur(): void {\r\n        this.input.nativeElement.blur();\r\n    }\r\n\r\n    /**\r\n     * @name getElementPosition\r\n     */\r\n    public getElementPosition(): ClientRect {\r\n        return this.input.nativeElement.getBoundingClientRect();\r\n    }\r\n\r\n    /**\r\n     * - removes input from the component\r\n     * @name destroy\r\n     */\r\n    public destroy(): void {\r\n        const input = this.input.nativeElement;\r\n        input.parentElement.removeChild(input);\r\n    }\r\n\r\n    /**\r\n     * @name onKeyDown\r\n     * @param $event\r\n     */\r\n    public onKeyDown($event) {\r\n        if ($event.key === 'Enter') {\r\n            this.submit($event);\r\n        } else {\r\n          return this.onKeydown.emit($event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name onKeyUp\r\n     * @param $event\r\n     */\r\n    public onKeyUp($event) {\r\n        this.inputText = this.value.value;\r\n        return this.onKeyup.emit($event);\r\n    }\r\n\r\n    /**\r\n     * @name submit\r\n     */\r\n    public submit($event: any): void {\r\n        $event.preventDefault();\r\n        this.onSubmit.emit($event);\r\n        this.form.reset();\r\n    }\r\n}\r\n","import {\r\n    Component,\r\n    Input\r\n} from '@angular/core';\r\n\r\n\r\nimport {\r\n    animate,\r\n    trigger,\r\n    style,\r\n    transition,\r\n    keyframes,\r\n    state\r\n} from '@angular/animations';\r\n\r\n@Component({\r\n    selector: 'tag-ripple',\r\n    styles: [`\r\n        :host {\r\n            width: 100%;\r\n            height: 100%;\r\n            left: 0;\r\n            overflow: hidden;\r\n            position: absolute;\r\n        }\r\n\r\n        .tag-ripple {\r\n            background: rgba(0, 0, 0, 0.1);\r\n            top: 50%;\r\n            left: 50%;\r\n            height: 100%;\r\n            transform: translate(-50%, -50%);\r\n            position: absolute;\r\n        }\r\n    `],\r\n    template: `\r\n        <div class=\"tag-ripple\" [@ink]=\"state\"></div>\r\n    `,\r\n    animations: [\r\n        trigger('ink', [\r\n            state('none', style({width: 0, opacity: 0})),\r\n            transition('none => clicked', [\r\n                animate(300, keyframes([\r\n                    style({opacity: 1, offset: 0, width: '30%', borderRadius: '100%'}),\r\n                    style({opacity: 1, offset: 0.5, width: '50%'}),\r\n                    style({opacity: 0.5, offset: 1, width: '100%', borderRadius: '16px'})\r\n                ]))\r\n            ])\r\n        ])\r\n    ]\r\n})\r\nexport class TagRipple {\r\n    @Input() public state = 'none';\r\n}\r\n","import {\r\n    Component,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    TemplateRef,\r\n    ElementRef,\r\n    HostListener,\r\n    HostBinding,\r\n    ViewChild,\r\n    ChangeDetectorRef,\r\n    Renderer2\r\n} from '@angular/core';\r\n\r\nimport { TagModel } from '../../core/accessor';\r\nimport { TagRipple } from '../tag/tag-ripple.component';\r\nimport { EventLike } from '../../core/helpers/event-like';\r\n\r\n// mocking navigator\r\nconst navigator = typeof window !== 'undefined' ? window.navigator : {\r\n    userAgent: 'Chrome',\r\n    vendor: 'Google Inc'\r\n};\r\n\r\nconst isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\r\n\r\n@Component({\r\n    selector: 'tag',\r\n    templateUrl: './tag.template.html',\r\n    styleUrls: ['./tag-component.style.scss']\r\n})\r\nexport class TagComponent {\r\n    /**\r\n     * @name model {TagModel}\r\n     */\r\n    @Input()\r\n    public model: TagModel;\r\n\r\n    /**\r\n     * @name removable {boolean}\r\n     */\r\n    @Input()\r\n    public removable: boolean;\r\n\r\n    /**\r\n     * @name editable {boolean}\r\n     */\r\n    @Input()\r\n    public editable: boolean;\r\n\r\n    /**\r\n     * @name template {TemplateRef<any>}\r\n     */\r\n    @Input()\r\n    public template: TemplateRef<any>;\r\n\r\n    /**\r\n     * @name displayBy {string}\r\n     */\r\n    @Input()\r\n    public displayBy: string;\r\n\r\n    /**\r\n     * @name identifyBy {string}\r\n     */\r\n    @Input()\r\n    public identifyBy: string;\r\n\r\n    /**\r\n     * @name index {number}\r\n     */\r\n    @Input()\r\n    public index: number;\r\n\r\n    /**\r\n     * @name hasRipple\r\n     */\r\n    @Input()\r\n    public hasRipple: boolean;\r\n\r\n    /**\r\n     * @name disabled\r\n     */\r\n    @Input()\r\n    public disabled = false;\r\n\r\n    /**\r\n     * @name canAddTag\r\n     */\r\n    @Input()\r\n    public canAddTag: (tag: TagModel) => boolean;\r\n\r\n    /**\r\n     * @name onSelect\r\n     */\r\n    @Output()\r\n    public onSelect: EventEmitter<TagModel> = new EventEmitter<TagModel>();\r\n\r\n    /**\r\n     * @name onRemove\r\n     */\r\n    @Output()\r\n    public onRemove: EventEmitter<TagModel> = new EventEmitter<TagModel>();\r\n\r\n    /**\r\n     * @name onBlur\r\n     */\r\n    @Output()\r\n    public onBlur: EventEmitter<TagModel> = new EventEmitter<TagModel>();\r\n\r\n    /**\r\n     * @name onKeyDown\r\n     */\r\n    @Output()\r\n    public onKeyDown: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    /**\r\n     * @name onTagEdited\r\n     */\r\n    @Output()\r\n    public onTagEdited: EventEmitter<TagModel> = new EventEmitter<TagModel>();\r\n\r\n    /**\r\n     * @name readonly {boolean}\r\n     */\r\n    public get readonly(): boolean {\r\n        return typeof this.model !== 'string' && this.model.readonly === true;\r\n    }\r\n\r\n    /**\r\n     * @name editing\r\n     */\r\n    public editing = false;\r\n\r\n    /**\r\n     * @name moving\r\n     */\r\n    @HostBinding('class.moving')\r\n    public moving: boolean;\r\n\r\n    /**\r\n     * @name rippleState\r\n     */\r\n    public rippleState = 'none';\r\n\r\n    /**\r\n     * @name ripple {TagRipple}\r\n     */\r\n    @ViewChild(TagRipple, { static: false })\r\n    public ripple: TagRipple;\r\n\r\n    constructor(\r\n        public element: ElementRef,\r\n        public renderer: Renderer2,\r\n        private cdRef: ChangeDetectorRef\r\n    ) {}\r\n\r\n    /**\r\n     * @name select\r\n     */\r\n    public select($event?: MouseEvent): void {\r\n        if (this.readonly || this.disabled) {\r\n            return;\r\n        }\r\n\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        this.focus();\r\n\r\n        this.onSelect.emit(this.model);\r\n    }\r\n\r\n    /**\r\n     * @name remove\r\n     */\r\n    public remove($event: MouseEvent): void {\r\n        $event.stopPropagation();\r\n        this.onRemove.emit(this);\r\n    }\r\n\r\n    /**\r\n     * @name focus\r\n     */\r\n    public focus(): void {\r\n        this.element.nativeElement.focus();\r\n    }\r\n\r\n    public move(): void {\r\n        this.moving = true;\r\n    }\r\n\r\n    /**\r\n     * @name keydown\r\n     * @param event\r\n     */\r\n    @HostListener('keydown', ['$event'])\r\n    public keydown(event: EventLike): void {\r\n        if (this.editing) {\r\n            if (event.keyCode === 13) {\r\n                return this.disableEditMode(event);\r\n            }\r\n        } else {\r\n            this.onKeyDown.emit({ event, model: this.model });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name blink\r\n     */\r\n    public blink(): void {\r\n        const classList = this.element.nativeElement.classList;\r\n        classList.add('blink');\r\n\r\n        setTimeout(() => classList.remove('blink'), 50);\r\n    }\r\n\r\n    /**\r\n     * @name toggleEditMode\r\n     */\r\n    public toggleEditMode(): void {\r\n        if (this.editable) {\r\n            return this.editing ? undefined : this.activateEditMode();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name onBlurred\r\n     * @param event\r\n     */\r\n    public onBlurred(event: any): void {\r\n        // Checks if it is editable first before handeling the onBlurred event in order to prevent\r\n        // a bug in IE where tags are still editable with onlyFromAutocomplete set to true\r\n        if (!this.editable) {\r\n            return;\r\n        }\r\n\r\n        this.disableEditMode();\r\n\r\n        const value: string = event.target.innerText;\r\n        const result =\r\n            typeof this.model === 'string'\r\n                ? value\r\n                : { ...this.model, [this.displayBy]: value };\r\n\r\n        this.onBlur.emit(result);\r\n    }\r\n\r\n    /**\r\n     * @name getDisplayValue\r\n     * @param item\r\n     */\r\n    public getDisplayValue(item: TagModel): string {\r\n        return typeof item === 'string' ? item : item[this.displayBy];\r\n    }\r\n\r\n    /**\r\n     * @desc returns whether the ripple is visible or not\r\n     * only works in Chrome\r\n     * @name isRippleVisible\r\n     */\r\n    public get isRippleVisible(): boolean {\r\n        return !this.readonly && !this.editing && isChrome && this.hasRipple;\r\n    }\r\n\r\n    /**\r\n     * @name disableEditMode\r\n     * @param $event\r\n     */\r\n    public disableEditMode($event?: EventLike): void {\r\n        const classList = this.element.nativeElement.classList;\r\n        const input = this.getContentEditableText();\r\n\r\n        this.editing = false;\r\n        classList.remove('tag--editing');\r\n\r\n        if (!input) {\r\n            this.setContentEditableText(this.model);\r\n            return;\r\n        }\r\n\r\n        this.storeNewValue(input);\r\n        this.cdRef.detectChanges();\r\n\r\n        if ($event) {\r\n            $event.preventDefault();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name isDeleteIconVisible\r\n     */\r\n    public isDeleteIconVisible(): boolean {\r\n        return (\r\n            !this.readonly && !this.disabled && this.removable && !this.editing\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @name getContentEditableText\r\n     */\r\n    private getContentEditableText(): string {\r\n        const input = this.getContentEditable();\r\n\r\n        return input ? input.innerText.trim() : '';\r\n    }\r\n\r\n    /**\r\n     * @name setContentEditableText\r\n     * @param model\r\n     */\r\n    private setContentEditableText(model: TagModel) {\r\n        const input = this.getContentEditable();\r\n        const value = this.getDisplayValue(model);\r\n\r\n        input.innerText = value;\r\n    }\r\n\r\n    /**\r\n     * @name\r\n     */\r\n    private activateEditMode(): void {\r\n        const classList = this.element.nativeElement.classList;\r\n        classList.add('tag--editing');\r\n\r\n        this.editing = true;\r\n    }\r\n\r\n    /**\r\n     * @name storeNewValue\r\n     * @param input\r\n     */\r\n    private storeNewValue(input: string): void {\r\n        const exists = (tag: TagModel) => {\r\n            return typeof tag === 'string'\r\n                ? tag === input\r\n                : tag[this.displayBy] === input;\r\n        };\r\n\r\n        const hasId = () => {\r\n            return this.model[this.identifyBy] !== this.model[this.displayBy];\r\n        };\r\n\r\n        // if the value changed, replace the value in the model\r\n        if (exists(this.model)) {\r\n            return;\r\n        }\r\n\r\n        const model =\r\n            typeof this.model === 'string'\r\n                ? input\r\n                : {\r\n                      index: this.index,\r\n                      [this.identifyBy]: hasId()\r\n                          ? this.model[this.identifyBy]\r\n                          : input,\r\n                      [this.displayBy]: input\r\n                  };\r\n\r\n        if (this.canAddTag(model)) {\r\n            this.onTagEdited.emit({ tag: model, index: this.index });\r\n        } else {\r\n            this.setContentEditableText(this.model);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name getContentEditable\r\n     */\r\n    private getContentEditable(): HTMLInputElement {\r\n        return this.element.nativeElement.querySelector('[contenteditable]');\r\n    }\r\n}\r\n","import {\r\n    animate,\r\n    trigger,\r\n    style,\r\n    transition,\r\n    keyframes,\r\n    state,\r\n    AnimationTriggerMetadata\r\n} from '@angular/animations';\r\n\r\n/**\r\n * @name animations\r\n */\r\nexport const animations = [\r\n    trigger('animation', [\r\n        state('in', style({\r\n            opacity: 1\r\n        })),\r\n        state('out', style({\r\n            opacity: 0\r\n        })),\r\n        transition(':enter', [\r\n            animate('{{ enter }}', keyframes([\r\n                style({opacity: 0, offset: 0, transform: 'translate(0px, 20px)'}),\r\n                style({opacity: 0.3, offset: 0.3, transform: 'translate(0px, -10px)'}),\r\n                style({opacity: 0.5, offset: 0.5, transform: 'translate(0px, 0px)'}),\r\n                style({opacity: 0.75, offset: 0.75, transform: 'translate(0px, 5px)'}),\r\n                style({opacity: 1, offset: 1, transform: 'translate(0px, 0px)'})\r\n            ]))\r\n        ]),\r\n        transition(':leave', [\r\n            animate('{{ leave }}', keyframes([\r\n                style({opacity: 1, transform: 'translateX(0)', offset: 0}),\r\n                style({opacity: 1, transform: 'translateX(-15px)', offset: 0.7}),\r\n                style({opacity: 0, transform: 'translateX(100%)', offset: 1.0})\r\n            ]))\r\n        ])\r\n    ])\r\n];\r\n","import {\r\n  Component,\r\n  ContentChildren,\r\n  EventEmitter,\r\n  HostListener,\r\n  Injector,\r\n  Input,\r\n  QueryList,\r\n  TemplateRef,\r\n  ViewChild,\r\n  AfterViewInit\r\n} from '@angular/core';\r\n\r\n// rx\r\nimport { Observable } from 'rxjs';\r\nimport { filter, first, debounceTime, distinctUntilChanged } from 'rxjs/operators';\r\n\r\nimport { Ng2Dropdown, Ng2MenuItem } from 'ng2-material-dropdown';\r\nimport { defaults } from '../../defaults';\r\nimport { TagModel } from '../../core/accessor';\r\nimport { TagInputComponent } from '../tag-input/tag-input';\r\n\r\n@Component({\r\n  selector: 'tag-input-dropdown',\r\n  templateUrl: './tag-input-dropdown.template.html'\r\n})\r\nexport class TagInputDropdown implements AfterViewInit {\r\n  /**\r\n   * @name dropdown\r\n   */\r\n  @ViewChild(Ng2Dropdown, { static: false }) public dropdown: Ng2Dropdown;\r\n\r\n  /**\r\n   * @name menuTemplate\r\n   * @desc reference to the template if provided by the user\r\n   */\r\n  @ContentChildren(TemplateRef) public templates: QueryList<TemplateRef<any>>;\r\n\r\n  /**\r\n   * @name offset\r\n   */\r\n  @Input() public offset: string = defaults.dropdown.offset;\r\n\r\n  /**\r\n   * @name focusFirstElement\r\n   */\r\n  @Input() public focusFirstElement = defaults.dropdown.focusFirstElement;\r\n\r\n  /**\r\n   * - show autocomplete dropdown if the value of input is empty\r\n   * @name showDropdownIfEmpty\r\n   */\r\n  @Input() public showDropdownIfEmpty = defaults.dropdown.showDropdownIfEmpty;\r\n\r\n  /**\r\n   * @description observable passed as input which populates the autocomplete items\r\n   * @name autocompleteObservable\r\n   */\r\n  @Input() public autocompleteObservable: (text: string) => Observable<any>;\r\n\r\n  /**\r\n   * - desc minimum text length in order to display the autocomplete dropdown\r\n   * @name minimumTextLength\r\n   */\r\n  @Input() public minimumTextLength = defaults.dropdown.minimumTextLength;\r\n\r\n  /**\r\n   * - number of items to display in the autocomplete dropdown\r\n   * @name limitItemsTo\r\n   */\r\n  @Input() public limitItemsTo: number = defaults.dropdown.limitItemsTo;\r\n\r\n  /**\r\n   * @name displayBy\r\n   */\r\n  @Input() public displayBy = defaults.dropdown.displayBy;\r\n\r\n  /**\r\n   * @name identifyBy\r\n   */\r\n  @Input() public identifyBy = defaults.dropdown.identifyBy;\r\n\r\n  /**\r\n   * @description a function a developer can use to implement custom matching for the autocomplete\r\n   * @name matchingFn\r\n   */\r\n  @Input() public matchingFn: (value: string, target: TagModel) => boolean =\r\n    defaults.dropdown.matchingFn;\r\n\r\n  /**\r\n   * @name appendToBody\r\n   */\r\n  @Input() public appendToBody = defaults.dropdown.appendToBody;\r\n\r\n  /**\r\n   * @name keepOpen\r\n   * @description option to leave dropdown open when adding a new item\r\n   */\r\n  @Input() public keepOpen = defaults.dropdown.keepOpen;\r\n\r\n  /**\r\n   * @name dynamicUpdate\r\n   */\r\n  @Input() public dynamicUpdate = defaults.dropdown.dynamicUpdate;\r\n\r\n  /**\r\n   * @name zIndex\r\n   */\r\n  @Input() public zIndex = defaults.dropdown.zIndex;\r\n\r\n  /**\r\n   * list of items that match the current value of the input (for autocomplete)\r\n   * @name items\r\n   */\r\n  public items: TagModel[] = [];\r\n\r\n  /**\r\n   * @name tagInput\r\n   */\r\n  public tagInput: TagInputComponent = this.injector.get(TagInputComponent);\r\n\r\n  /**\r\n   * @name _autocompleteItems\r\n   */\r\n  private _autocompleteItems: TagModel[] = [];\r\n\r\n  /**\r\n   * @name autocompleteItems\r\n   * @param items\r\n   */\r\n  public set autocompleteItems(items: TagModel[]) {\r\n    this._autocompleteItems = items;\r\n  }\r\n\r\n  /**\r\n   * @name autocompleteItems\r\n   * @desc array of items that will populate the autocomplete\r\n   */\r\n  @Input() public get autocompleteItems(): TagModel[] {\r\n    const items = this._autocompleteItems;\r\n\r\n    if (!items) {\r\n      return [];\r\n    }\r\n\r\n    return items.map((item: TagModel) => {\r\n      return typeof item === 'string'\r\n        ? {\r\n            [this.displayBy]: item,\r\n            [this.identifyBy]: item\r\n          }\r\n        : item;\r\n    });\r\n  }\r\n\r\n  constructor(private readonly injector: Injector) {}\r\n\r\n  /**\r\n   * @name ngAfterviewInit\r\n   */\r\n  ngAfterViewInit(): void {\r\n    this.onItemClicked().subscribe((item: Ng2MenuItem) => {\r\n      this.requestAdding(item);\r\n    });\r\n\r\n    // reset itemsMatching array when the dropdown is hidden\r\n    this.onHide().subscribe(this.resetItems);\r\n\r\n    const DEBOUNCE_TIME = 200;\r\n    const KEEP_OPEN = this.keepOpen;\r\n\r\n    this.tagInput.onTextChange\r\n      .asObservable()\r\n      .pipe(\r\n        distinctUntilChanged(),\r\n        debounceTime(DEBOUNCE_TIME),\r\n        filter((value: string) => {\r\n          if (KEEP_OPEN === false) {\r\n            return value.length > 0;\r\n          }\r\n\r\n          return true;\r\n        })\r\n      )\r\n      .subscribe(this.show);\r\n  }\r\n\r\n  /**\r\n   * @name updatePosition\r\n   */\r\n  public updatePosition(): void {\r\n    const position = this.tagInput.inputForm.getElementPosition();\r\n\r\n    this.dropdown.menu.updatePosition(position, this.dynamicUpdate);\r\n  }\r\n\r\n  /**\r\n   * @name isVisible\r\n   */\r\n  public get isVisible(): boolean {\r\n    return this.dropdown.menu.dropdownState.menuState.isVisible;\r\n  }\r\n\r\n  /**\r\n   * @name onHide\r\n   */\r\n  public onHide(): EventEmitter<Ng2Dropdown> {\r\n    return this.dropdown.onHide;\r\n  }\r\n\r\n  /**\r\n   * @name onItemClicked\r\n   */\r\n  public onItemClicked(): EventEmitter<string> {\r\n    return this.dropdown.onItemClicked;\r\n  }\r\n\r\n  /**\r\n   * @name selectedItem\r\n   */\r\n  public get selectedItem(): Ng2MenuItem {\r\n    return this.dropdown.menu.dropdownState.dropdownState.selectedItem;\r\n  }\r\n\r\n  /**\r\n   * @name state\r\n   */\r\n  public get state(): any {\r\n    return this.dropdown.menu.dropdownState;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @name show\r\n   */\r\n  public show = (): void => {\r\n    const maxItemsReached =\r\n      this.tagInput.items.length === this.tagInput.maxItems;\r\n    const value = this.getFormValue();\r\n    const hasMinimumText = value.trim().length >= this.minimumTextLength;\r\n    const position = this.calculatePosition();\r\n    const items = this.getMatchingItems(value);\r\n    const hasItems = items.length > 0;\r\n    const isHidden = this.isVisible === false;\r\n    const showDropdownIfEmpty = this.showDropdownIfEmpty && hasItems && !value;\r\n    const isDisabled = this.tagInput.disable;\r\n\r\n    const shouldShow =\r\n      isHidden && ((hasItems && hasMinimumText) || showDropdownIfEmpty);\r\n    const shouldHide = this.isVisible && !hasItems;\r\n\r\n    if (this.autocompleteObservable && hasMinimumText) {\r\n      return this.getItemsFromObservable(value);\r\n    }\r\n\r\n    if (\r\n      (!this.showDropdownIfEmpty && !value) ||\r\n      maxItemsReached ||\r\n      isDisabled\r\n    ) {\r\n      return this.dropdown.hide();\r\n    }\r\n\r\n    this.setItems(items);\r\n\r\n    if (shouldShow) {\r\n      this.dropdown.show(position);\r\n    } else if (shouldHide) {\r\n      this.hide();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @name hide\r\n   */\r\n  public hide(): void {\r\n    this.resetItems();\r\n    this.dropdown.hide();\r\n  }\r\n\r\n  /**\r\n   * @name scrollListener\r\n   */\r\n  @HostListener('window:scroll')\r\n  public scrollListener(): void {\r\n    if (!this.isVisible || !this.dynamicUpdate) {\r\n      return;\r\n    }\r\n\r\n    this.updatePosition();\r\n  }\r\n\r\n  /**\r\n   * @name onWindowBlur\r\n   */\r\n  @HostListener('window:blur')\r\n  public onWindowBlur(): void {\r\n    this.dropdown.hide();\r\n  }\r\n\r\n  /**\r\n   * @name getFormValue\r\n   */\r\n  private getFormValue(): string {\r\n    const formValue = this.tagInput.formValue;\r\n    return formValue ? formValue.toString().trim() : '';\r\n  }\r\n\r\n  /**\r\n   * @name calculatePosition\r\n   */\r\n  private calculatePosition(): ClientRect {\r\n    return this.tagInput.inputForm.getElementPosition();\r\n  }\r\n\r\n  /**\r\n   * @name requestAdding\r\n   * @param item {Ng2MenuItem}\r\n   */\r\n  private requestAdding = async (item: Ng2MenuItem) => {\r\n    const tag = this.createTagModel(item);\r\n    await this.tagInput.onAddingRequested(true, tag).catch(() => {});\r\n  };\r\n\r\n  /**\r\n   * @name createTagModel\r\n   * @param item\r\n   */\r\n  private createTagModel(item: Ng2MenuItem): TagModel {\r\n    const display =\r\n      typeof item.value === 'string' ? item.value : item.value[this.displayBy];\r\n    const value =\r\n      typeof item.value === 'string' ? item.value : item.value[this.identifyBy];\r\n\r\n    return {\r\n      ...item.value,\r\n      [this.tagInput.displayBy]: display,\r\n      [this.tagInput.identifyBy]: value\r\n    };\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param value {string}\r\n   */\r\n  private getMatchingItems(value: string): TagModel[] {\r\n    if (!value && !this.showDropdownIfEmpty) {\r\n      return [];\r\n    }\r\n\r\n    const dupesAllowed = this.tagInput.allowDupes;\r\n\r\n    return this.autocompleteItems.filter((item: TagModel) => {\r\n      const hasValue = dupesAllowed\r\n        ? false\r\n        : this.tagInput.tags.some(tag => {\r\n            const identifyBy = this.tagInput.identifyBy;\r\n            const model =\r\n              typeof tag.model === 'string' ? tag.model : tag.model[identifyBy];\r\n\r\n            return model === item[this.identifyBy];\r\n          });\r\n\r\n      return this.matchingFn(value, item) && hasValue === false;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @name setItems\r\n   */\r\n  private setItems(items: TagModel[]): void {\r\n    this.items = items.slice(0, this.limitItemsTo || items.length);\r\n  }\r\n\r\n  /**\r\n   * @name resetItems\r\n   */\r\n  private resetItems = (): void => {\r\n    this.items = [];\r\n  };\r\n\r\n  /**\r\n   * @name populateItems\r\n   * @param data\r\n   */\r\n  private populateItems(data: any): TagInputDropdown {\r\n    this.autocompleteItems = data.map(item => {\r\n      return typeof item === 'string'\r\n        ? {\r\n            [this.displayBy]: item,\r\n            [this.identifyBy]: item\r\n          }\r\n        : item;\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @name getItemsFromObservable\r\n   * @param text\r\n   */\r\n  private getItemsFromObservable = (text: string): void => {\r\n    this.setLoadingState(true);\r\n\r\n    const subscribeFn = (data: any[]) => {\r\n      // hide loading animation\r\n      this.setLoadingState(false)\r\n        // add items\r\n        .populateItems(data);\r\n\r\n      this.setItems(this.getMatchingItems(text));\r\n\r\n      if (this.items.length) {\r\n        this.dropdown.show(this.calculatePosition());\r\n      } else {\r\n        this.dropdown.hide();\r\n      }\r\n    };\r\n\r\n    this.autocompleteObservable(text)\r\n      .pipe(first())\r\n      .subscribe(subscribeFn, () => this.setLoadingState(false));\r\n  };\r\n\r\n  /**\r\n   * @name setLoadingState\r\n   * @param state\r\n   */\r\n  private setLoadingState(state: boolean): TagInputDropdown {\r\n    this.tagInput.isLoading = state;\r\n\r\n    return this;\r\n  }\r\n}\r\n","// angular\r\nimport {\r\n    Component,\r\n    forwardRef,\r\n    HostBinding,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    Renderer2,\r\n    ViewChild,\r\n    ViewChildren,\r\n    ContentChildren,\r\n    ContentChild,\r\n    OnInit,\r\n    TemplateRef,\r\n    QueryList,\r\n    AfterViewInit\r\n} from '@angular/core';\r\n\r\nimport {\r\n    AsyncValidatorFn,\r\n    FormControl,\r\n    NG_VALUE_ACCESSOR,\r\n    ValidatorFn\r\n} from '@angular/forms';\r\n\r\n// rx\r\nimport { Observable } from 'rxjs';\r\nimport { debounceTime, filter, map, first } from 'rxjs/operators';\r\n\r\n// ng2-tag-input\r\nimport { TagInputAccessor, TagModel } from '../../core/accessor';\r\nimport { listen } from '../../core/helpers/listen';\r\nimport * as constants from '../../core/constants';\r\n\r\nimport { DragProvider, DraggedTag } from '../../core/providers/drag-provider';\r\n\r\nimport { TagInputForm } from '../tag-input-form/tag-input-form.component';\r\nimport { TagComponent } from '../tag/tag.component';\r\n\r\nimport { animations } from './animations';\r\nimport { defaults } from '../../defaults';\r\nimport { TagInputDropdown } from '../dropdown/tag-input-dropdown.component';\r\n\r\n// angular universal hacks\r\n/* tslint:disable-next-line */\r\nconst DragEvent = (window as any).DragEvent;\r\n\r\nconst CUSTOM_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TagInputComponent),\r\n    multi: true\r\n};\r\n@Component({\r\n    selector: 'tag-input',\r\n    providers: [CUSTOM_ACCESSOR],\r\n    styleUrls: ['./tag-input.style.scss'],\r\n    templateUrl: './tag-input.template.html',\r\n    animations\r\n})\r\nexport class TagInputComponent extends TagInputAccessor implements OnInit, AfterViewInit {\r\n    /**\r\n     * @name separatorKeys\r\n     * @desc keyboard keys with which a user can separate items\r\n     */\r\n    @Input() public separatorKeys: string[] = defaults.tagInput.separatorKeys;\r\n\r\n    /**\r\n     * @name separatorKeyCodes\r\n     * @desc keyboard key codes with which a user can separate items\r\n     */\r\n    @Input() public separatorKeyCodes: number[] = defaults.tagInput.separatorKeyCodes;\r\n\r\n    /**\r\n     * @name placeholder\r\n     * @desc the placeholder of the input text\r\n     */\r\n    @Input() public placeholder: string = defaults.tagInput.placeholder;\r\n\r\n    /**\r\n     * @name secondaryPlaceholder\r\n     * @desc placeholder to appear when the input is empty\r\n     */\r\n    @Input() public secondaryPlaceholder: string = defaults.tagInput.secondaryPlaceholder;\r\n\r\n    /**\r\n     * @name maxItems\r\n     * @desc maximum number of items that can be added\r\n     */\r\n    @Input() public maxItems: number = defaults.tagInput.maxItems;\r\n\r\n    /**\r\n     * @name validators\r\n     * @desc array of Validators that are used to validate the tag before it gets appended to the list\r\n     */\r\n    @Input() public validators: ValidatorFn[] = defaults.tagInput.validators;\r\n\r\n    /**\r\n     * @name asyncValidators\r\n     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\r\n     */\r\n    @Input() public asyncValidators: AsyncValidatorFn[] = defaults.tagInput.asyncValidators;\r\n\r\n    /**\r\n    * - if set to true, it will only possible to add items from the autocomplete\r\n    * @name onlyFromAutocomplete\r\n    */\r\n    @Input() public onlyFromAutocomplete = defaults.tagInput.onlyFromAutocomplete;\r\n\r\n    /**\r\n     * @name errorMessages\r\n     */\r\n    @Input() public errorMessages: { [key: string]: string } = defaults.tagInput.errorMessages;\r\n\r\n    /**\r\n     * @name theme\r\n     */\r\n    @Input() public theme: string = defaults.tagInput.theme;\r\n\r\n    /**\r\n     * @name onTextChangeDebounce\r\n     */\r\n    @Input() public onTextChangeDebounce = defaults.tagInput.onTextChangeDebounce;\r\n\r\n    /**\r\n     * - custom id assigned to the input\r\n     * @name id\r\n     */\r\n    @Input() public inputId = defaults.tagInput.inputId;\r\n\r\n    /**\r\n     * - custom class assigned to the input\r\n     */\r\n    @Input() public inputClass: string = defaults.tagInput.inputClass;\r\n\r\n    /**\r\n     * - option to clear text input when the form is blurred\r\n     * @name clearOnBlur\r\n     */\r\n    @Input() public clearOnBlur: boolean = defaults.tagInput.clearOnBlur;\r\n\r\n    /**\r\n     * - hideForm\r\n     * @name clearOnBlur\r\n     */\r\n    @Input() public hideForm: boolean = defaults.tagInput.hideForm;\r\n\r\n    /**\r\n     * @name addOnBlur\r\n     */\r\n    @Input() public addOnBlur: boolean = defaults.tagInput.addOnBlur;\r\n\r\n    /**\r\n     * @name addOnPaste\r\n     */\r\n    @Input() public addOnPaste: boolean = defaults.tagInput.addOnPaste;\r\n\r\n    /**\r\n     * - pattern used with the native method split() to separate patterns in the string pasted\r\n     * @name pasteSplitPattern\r\n     */\r\n    @Input() public pasteSplitPattern = defaults.tagInput.pasteSplitPattern;\r\n\r\n    /**\r\n     * @name blinkIfDupe\r\n     */\r\n    @Input() public blinkIfDupe = defaults.tagInput.blinkIfDupe;\r\n\r\n    /**\r\n     * @name removable\r\n     */\r\n    @Input() public removable = defaults.tagInput.removable;\r\n\r\n    /**\r\n     * @name editable\r\n     */\r\n    @Input() public editable: boolean = defaults.tagInput.editable;\r\n\r\n    /**\r\n     * @name allowDupes\r\n     */\r\n    @Input() public allowDupes = defaults.tagInput.allowDupes;\r\n\r\n    /**\r\n     * @description if set to true, the newly added tags will be added as strings, and not objects\r\n     * @name modelAsStrings\r\n     */\r\n    @Input() public modelAsStrings = defaults.tagInput.modelAsStrings;\r\n\r\n    /**\r\n     * @name trimTags\r\n     */\r\n    @Input() public trimTags = defaults.tagInput.trimTags;\r\n\r\n    /**\r\n     * @name inputText\r\n     */\r\n    @Input() public get inputText(): string {\r\n        return this.inputTextValue;\r\n    }\r\n\r\n    /**\r\n     * @name ripple\r\n     */\r\n    @Input() public ripple: boolean = defaults.tagInput.ripple;\r\n\r\n    /**\r\n     * @name tabindex\r\n     * @desc pass through the specified tabindex to the input\r\n     */\r\n    @Input() public tabindex: string = defaults.tagInput.tabIndex;\r\n\r\n    /**\r\n     * @name disable\r\n     */\r\n    @Input() public disable: boolean = defaults.tagInput.disable;\r\n\r\n    /**\r\n     * @name dragZone\r\n     */\r\n    @Input() public dragZone: string = defaults.tagInput.dragZone;\r\n\r\n    /**\r\n     * @name onRemoving\r\n     */\r\n    @Input() public onRemoving = defaults.tagInput.onRemoving;\r\n\r\n    /**\r\n     * @name onAdding\r\n     */\r\n    @Input() public onAdding = defaults.tagInput.onAdding;\r\n\r\n    /**\r\n     * @name animationDuration\r\n     */\r\n    @Input() public animationDuration = defaults.tagInput.animationDuration;\r\n\r\n    /**\r\n     * @name onAdd\r\n     * @desc event emitted when adding a new item\r\n     */\r\n    @Output() public onAdd = new EventEmitter<TagModel>();\r\n\r\n    /**\r\n     * @name onRemove\r\n     * @desc event emitted when removing an existing item\r\n     */\r\n    @Output() public onRemove = new EventEmitter<TagModel>();\r\n\r\n    /**\r\n     * @name onSelect\r\n     * @desc event emitted when selecting an item\r\n     */\r\n    @Output() public onSelect = new EventEmitter<TagModel>();\r\n\r\n    /**\r\n     * @name onFocus\r\n     * @desc event emitted when the input is focused\r\n     */\r\n    @Output() public onFocus = new EventEmitter<string>();\r\n\r\n    /**\r\n     * @name onFocus\r\n     * @desc event emitted when the input is blurred\r\n     */\r\n    @Output() public onBlur = new EventEmitter<string>();\r\n\r\n    /**\r\n     * @name onTextChange\r\n     * @desc event emitted when the input value changes\r\n     */\r\n    @Output() public onTextChange = new EventEmitter<TagModel>();\r\n\r\n    /**\r\n     * - output triggered when text is pasted in the form\r\n     * @name onPaste\r\n     */\r\n    @Output() public onPaste = new EventEmitter<string>();\r\n\r\n    /**\r\n     * - output triggered when tag entered is not valid\r\n     * @name onValidationError\r\n     */\r\n    @Output() public onValidationError = new EventEmitter<TagModel>();\r\n\r\n    /**\r\n     * - output triggered when tag is edited\r\n     * @name onTagEdited\r\n     */\r\n    @Output() public onTagEdited = new EventEmitter<TagModel>();\r\n\r\n    /**\r\n     * @name dropdown\r\n     */\r\n    // @ContentChild(forwardRef(() => TagInputDropdown), {static: true}) dropdown: TagInputDropdown;\r\n    @ContentChild(TagInputDropdown, { static: false }) public dropdown: TagInputDropdown;\r\n    /**\r\n     * @name template\r\n     * @desc reference to the template if provided by the user\r\n     */\r\n    @ContentChildren(TemplateRef, { descendants: false }) public templates: QueryList<TemplateRef<any>>;\r\n\r\n    /**\r\n     * @name inputForm\r\n     */\r\n    @ViewChild(TagInputForm, { static: false }) public inputForm: TagInputForm;\r\n\r\n    /**\r\n     * @name selectedTag\r\n     * @desc reference to the current selected tag\r\n     */\r\n    public selectedTag: TagModel | undefined;\r\n\r\n    /**\r\n     * @name isLoading\r\n     */\r\n    public isLoading = false;\r\n\r\n    /**\r\n     * @name inputText\r\n     * @param text\r\n     */\r\n    public set inputText(text: string) {\r\n        this.inputTextValue = text;\r\n        this.inputTextChange.emit(text);\r\n    }\r\n\r\n    /**\r\n     * @name tags\r\n     * @desc list of Element items\r\n     */\r\n    @ViewChildren(TagComponent) public tags: QueryList<TagComponent>;\r\n\r\n    /**\r\n     * @name listeners\r\n     * @desc array of events that get fired using @fireEvents\r\n     */\r\n    private listeners = {\r\n        [constants.KEYDOWN]: <{ (fun): any }[]>[],\r\n        [constants.KEYUP]: <{ (fun): any }[]>[]\r\n    };\r\n\r\n    /**\r\n     * @description emitter for the 2-way data binding inputText value\r\n     * @name inputTextChange\r\n     */\r\n    @Output() public inputTextChange: EventEmitter<string> = new EventEmitter();\r\n\r\n    /**\r\n     * @description private variable to bind get/set\r\n     * @name inputTextValue\r\n     */\r\n    public inputTextValue = '';\r\n\r\n    /**\r\n     * @desc removes the tab index if it is set - it will be passed through to the input\r\n     * @name tabindexAttr\r\n     */\r\n    @HostBinding('attr.tabindex')\r\n    public get tabindexAttr(): string {\r\n        return this.tabindex !== '' ? '-1' : '';\r\n    }\r\n\r\n    /**\r\n     * @name animationMetadata\r\n     */\r\n    public animationMetadata: { value: string, params: object };\r\n\r\n    public errors: string[] = [];\r\n\r\n    public isProgressBarVisible$: Observable<boolean>;\r\n\r\n    constructor(private readonly renderer: Renderer2,\r\n        public readonly dragProvider: DragProvider) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @name ngAfterViewInit\r\n     */\r\n    public ngAfterViewInit(): void {\r\n        // set up listeners\r\n\r\n        this.setUpKeypressListeners();\r\n        this.setupSeparatorKeysListener();\r\n        this.setUpInputKeydownListeners();\r\n\r\n        if (this.onTextChange.observers.length) {\r\n            this.setUpTextChangeSubscriber();\r\n        }\r\n\r\n        // if clear on blur is set to true, subscribe to the event and clear the text's form\r\n        if (this.clearOnBlur || this.addOnBlur) {\r\n            this.setUpOnBlurSubscriber();\r\n        }\r\n\r\n        // if addOnPaste is set to true, register the handler and add items\r\n        if (this.addOnPaste) {\r\n            this.setUpOnPasteListener();\r\n        }\r\n\r\n        const statusChanges$ = this.inputForm.form.statusChanges;\r\n\r\n        statusChanges$.pipe(\r\n            filter((status: string) => status !== 'PENDING')\r\n        ).subscribe(() => {\r\n            this.errors = this.inputForm.getErrorMessages(this.errorMessages);\r\n        });\r\n\r\n        this.isProgressBarVisible$ = statusChanges$.pipe(\r\n            map((status: string) => {\r\n                return status === 'PENDING' || this.isLoading;\r\n            })\r\n        );\r\n\r\n        // if hideForm is set to true, remove the input\r\n        if (this.hideForm) {\r\n            this.inputForm.destroy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name ngOnInit\r\n     */\r\n    public ngOnInit(): void {\r\n        // if the number of items specified in the model is > of the value of maxItems\r\n        // degrade gracefully and let the max number of items to be the number of items in the model\r\n        // though, warn the user.\r\n        const hasReachedMaxItems = this.maxItems !== undefined &&\r\n            this.items &&\r\n            this.items.length > this.maxItems;\r\n\r\n        if (hasReachedMaxItems) {\r\n            this.maxItems = this.items.length;\r\n            console.warn(constants.MAX_ITEMS_WARNING);\r\n        }\r\n\r\n        // Setting editable to false to fix problem with tags in IE still being editable when\r\n        // onlyFromAutocomplete is true\r\n        this.editable = this.onlyFromAutocomplete ? false : this.editable;\r\n\r\n        this.setAnimationMetadata();\r\n    }\r\n\r\n    /**\r\n     * @name onRemoveRequested\r\n     * @param tag\r\n     * @param index\r\n     */\r\n    public onRemoveRequested(tag: TagModel, index: number): Promise<TagModel> {\r\n        return new Promise(resolve => {\r\n            const subscribeFn = (model: TagModel) => {\r\n                this.removeItem(model, index);\r\n                resolve(tag);\r\n            };\r\n\r\n            this.onRemoving ?\r\n                this.onRemoving(tag)\r\n                    .pipe(first())\r\n                    .subscribe(subscribeFn) : subscribeFn(tag);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @name onAddingRequested\r\n     * @param fromAutocomplete {boolean}\r\n     * @param tag {TagModel}\r\n     * @param index? {number}\r\n     * @param giveupFocus? {boolean}\r\n     */\r\n    public onAddingRequested(fromAutocomplete: boolean, tag: TagModel,\r\n        index?: number, giveupFocus?: boolean): Promise<TagModel> {\r\n        return new Promise((resolve, reject) => {\r\n            const subscribeFn = (model: TagModel) => {\r\n                return this\r\n                    .addItem(fromAutocomplete, model, index, giveupFocus)\r\n                    .then(resolve)\r\n                    .catch(reject);\r\n            };\r\n\r\n            return this.onAdding ?\r\n                this.onAdding(tag)\r\n                    .pipe(first())\r\n                    .subscribe(subscribeFn, reject) : subscribeFn(tag);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @name appendTag\r\n     * @param tag {TagModel}\r\n     */\r\n    public appendTag = (tag: TagModel, index = this.items.length): void => {\r\n        const items = this.items;\r\n        const model = this.modelAsStrings ? tag[this.identifyBy] : tag;\r\n\r\n        this.items = [\r\n            ...items.slice(0, index),\r\n            model,\r\n            ...items.slice(index, items.length)\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * @name createTag\r\n     * @param model\r\n     */\r\n    public createTag = (model: TagModel): TagModel => {\r\n        const trim = (val: TagModel, key: string): TagModel => {\r\n            return typeof val === 'string' ? val.trim() : val[key];\r\n        };\r\n\r\n        return {\r\n            ...typeof model !== 'string' ? model : {},\r\n            [this.displayBy]: this.trimTags ? trim(model, this.displayBy) : model,\r\n            [this.identifyBy]: this.trimTags ? trim(model, this.identifyBy) : model\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @name selectItem\r\n     * @desc selects item passed as parameter as the selected tag\r\n     * @param item\r\n     * @param emit\r\n     */\r\n    public selectItem(item: TagModel | undefined, emit = true): void {\r\n        const isReadonly = item && typeof item !== 'string' && item.readonly;\r\n\r\n        if (isReadonly || this.selectedTag === item) {\r\n            return;\r\n        }\r\n\r\n        this.selectedTag = item;\r\n\r\n        if (emit) {\r\n            this.onSelect.emit(item);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name fireEvents\r\n     * @desc goes through the list of the events for a given eventName, and fires each of them\r\n     * @param eventName\r\n     * @param $event\r\n     */\r\n    public fireEvents(eventName: string, $event?): void {\r\n        this.listeners[eventName].forEach(listener => listener.call(this, $event));\r\n    }\r\n\r\n    /**\r\n     * @name handleKeydown\r\n     * @desc handles action when the user hits a keyboard key\r\n     * @param data\r\n     */\r\n    public handleKeydown(data: any): void {\r\n        const event = data.event;\r\n        const key = event.keyCode || event.which;\r\n        const shiftKey = event.shiftKey || false;\r\n\r\n        switch (constants.KEY_PRESS_ACTIONS[key]) {\r\n            case constants.ACTIONS_KEYS.DELETE:\r\n                if (this.selectedTag && this.removable) {\r\n                    const index = this.items.indexOf(this.selectedTag);\r\n                    this.onRemoveRequested(this.selectedTag, index);\r\n                }\r\n                break;\r\n\r\n            case constants.ACTIONS_KEYS.SWITCH_PREV:\r\n                this.moveToTag(data.model, constants.PREV);\r\n                break;\r\n\r\n            case constants.ACTIONS_KEYS.SWITCH_NEXT:\r\n                this.moveToTag(data.model, constants.NEXT);\r\n                break;\r\n\r\n            case constants.ACTIONS_KEYS.TAB:\r\n                if (shiftKey) {\r\n                    if (this.isFirstTag(data.model)) {\r\n                        return;\r\n                    }\r\n\r\n                    this.moveToTag(data.model, constants.PREV);\r\n                } else {\r\n                    if (this.isLastTag(data.model) && (this.disable || this.maxItemsReached)) {\r\n                        return;\r\n                    }\r\n\r\n                    this.moveToTag(data.model, constants.NEXT);\r\n                }\r\n                break;\r\n\r\n            default:\r\n                return;\r\n        }\r\n\r\n        // prevent default behaviour\r\n        event.preventDefault();\r\n    }\r\n\r\n    public async onFormSubmit() {\r\n        try {\r\n            await this.onAddingRequested(false, this.formValue);\r\n        } catch {\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name setInputValue\r\n     * @param value\r\n     */\r\n    public setInputValue(value: string, emitEvent = true): void {\r\n        const control = this.getControl();\r\n\r\n        // update form value with the transformed item\r\n        control.setValue(value, { emitEvent });\r\n    }\r\n\r\n    /**\r\n     * @name getControl\r\n     */\r\n    private getControl(): FormControl {\r\n        return this.inputForm.value as FormControl;\r\n    }\r\n\r\n    /**\r\n     * @name focus\r\n     * @param applyFocus\r\n     * @param displayAutocomplete\r\n     */\r\n    public focus(applyFocus = false, displayAutocomplete = false): void {\r\n        if (this.dragProvider.getState('dragging')) {\r\n            return;\r\n        }\r\n\r\n        this.selectItem(undefined, false);\r\n\r\n        if (applyFocus) {\r\n            this.inputForm.focus();\r\n            this.onFocus.emit(this.formValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name blur\r\n     */\r\n    public blur(): void {\r\n        this.onTouched();\r\n\r\n        this.onBlur.emit(this.formValue);\r\n    }\r\n\r\n    /**\r\n     * @name hasErrors\r\n     */\r\n    public hasErrors(): boolean {\r\n        return !!this.inputForm && !!this.inputForm.hasErrors();\r\n    }\r\n\r\n    /**\r\n     * @name isInputFocused\r\n     */\r\n    public isInputFocused(): boolean {\r\n        return !!this.inputForm && this.inputForm.isInputFocused();\r\n    }\r\n\r\n    /**\r\n     * - this is the one way I found to tell if the template has been passed and it is not\r\n     * the template for the menu item\r\n     * @name hasCustomTemplate\r\n     */\r\n    public hasCustomTemplate(): boolean {\r\n        const template = this.templates ? this.templates.first : undefined;\r\n        const menuTemplate = this.dropdown && this.dropdown.templates ?\r\n            this.dropdown.templates.first : undefined;\r\n\r\n        return Boolean(template && template !== menuTemplate);\r\n    }\r\n\r\n    /**\r\n     * @name maxItemsReached\r\n     */\r\n    public get maxItemsReached(): boolean {\r\n        return this.maxItems !== undefined &&\r\n            this.items.length >= this.maxItems;\r\n    }\r\n\r\n    /**\r\n     * @name formValue\r\n     */\r\n    public get formValue(): string {\r\n        const form = this.inputForm.value;\r\n\r\n        return form ? form.value : '';\r\n    }\r\n\r\n    /**3\r\n     * @name onDragStarted\r\n     * @param event\r\n     * @param index\r\n     */\r\n    public onDragStarted(event: DragEvent, tag: TagModel, index: number): void {\r\n        event.stopPropagation();\r\n\r\n        const item = { zone: this.dragZone, tag, index } as DraggedTag;\r\n\r\n        this.dragProvider.setSender(this);\r\n        this.dragProvider.setDraggedItem(event, item);\r\n        this.dragProvider.setState({ dragging: true, index });\r\n    }\r\n\r\n    /**\r\n     * @name onDragOver\r\n     * @param event\r\n     */\r\n    public onDragOver(event: DragEvent, index?: number): void {\r\n        this.dragProvider.setState({ dropping: true });\r\n        this.dragProvider.setReceiver(this);\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * @name onTagDropped\r\n     * @param event\r\n     * @param index\r\n     */\r\n    public onTagDropped(event: DragEvent, index?: number): void {\r\n        const item = this.dragProvider.getDraggedItem(event);\r\n\r\n        if (!item || item.zone !== this.dragZone) {\r\n            return;\r\n        }\r\n\r\n        this.dragProvider.onTagDropped(item.tag, item.index, index);\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    /**\r\n     * @name isDropping\r\n     */\r\n    public isDropping(): boolean {\r\n        const isReceiver = this.dragProvider.receiver === this;\r\n        const isDropping = this.dragProvider.getState('dropping');\r\n\r\n        return Boolean(isReceiver && isDropping);\r\n    }\r\n\r\n    /**\r\n     * @name onTagBlurred\r\n     * @param changedElement {TagModel}\r\n     * @param index {number}\r\n     */\r\n    public onTagBlurred(changedElement: TagModel, index: number): void {\r\n        this.items[index] = changedElement;\r\n        this.blur();\r\n    }\r\n\r\n    /**\r\n     * @name trackBy\r\n     * @param items\r\n     */\r\n    public trackBy(index: number, item: TagModel): string {\r\n        return item[this.identifyBy];\r\n    }\r\n\r\n    /**\r\n     * @name updateEditedTag\r\n     * @param tag\r\n     */\r\n    public updateEditedTag({ tag, index }: { tag: TagModel, index: number }): void {\r\n        this.onTagEdited.emit(tag);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param tag\r\n     * @param isFromAutocomplete\r\n     */\r\n    public isTagValid = (tag: TagModel, fromAutocomplete = false): boolean => {\r\n        const selectedItem = this.dropdown ? this.dropdown.selectedItem : undefined;\r\n        const value = this.getItemDisplay(tag).trim();\r\n\r\n        if (selectedItem && !fromAutocomplete || !value) {\r\n            return false;\r\n        }\r\n\r\n        const dupe = this.findDupe(tag, fromAutocomplete);\r\n\r\n        // if so, give a visual cue and return false\r\n        if (!this.allowDupes && dupe && this.blinkIfDupe) {\r\n            const model = this.tags.find(item => {\r\n                return this.getItemValue(item.model) === this.getItemValue(dupe);\r\n            });\r\n\r\n            if (model) {\r\n                model.blink();\r\n            }\r\n        }\r\n\r\n        const isFromAutocomplete = fromAutocomplete && this.onlyFromAutocomplete;\r\n\r\n        const assertions = [\r\n            // 1. there must be no dupe OR dupes are allowed\r\n            !dupe || this.allowDupes,\r\n\r\n            // 2. check max items has not been reached\r\n            !this.maxItemsReached,\r\n\r\n            // 3. check item comes from autocomplete or onlyFromAutocomplete is false\r\n            ((isFromAutocomplete) || !this.onlyFromAutocomplete)\r\n        ];\r\n\r\n        return assertions.filter(Boolean).length === assertions.length;\r\n    }\r\n\r\n    /**\r\n     * @name moveToTag\r\n     * @param item\r\n     * @param direction\r\n     */\r\n    private moveToTag(item: TagModel, direction: string): void {\r\n        const isLast = this.isLastTag(item);\r\n        const isFirst = this.isFirstTag(item);\r\n        const stopSwitch = (direction === constants.NEXT && isLast) ||\r\n            (direction === constants.PREV && isFirst);\r\n\r\n        if (stopSwitch) {\r\n            this.focus(true);\r\n            return;\r\n        }\r\n\r\n        const offset = direction === constants.NEXT ? 1 : -1;\r\n        const index = this.getTagIndex(item) + offset;\r\n        const tag = this.getTagAtIndex(index);\r\n\r\n        return tag.select.call(tag);\r\n    }\r\n\r\n    /**\r\n     * @name isFirstTag\r\n     * @param item {TagModel}\r\n     */\r\n    private isFirstTag(item: TagModel): boolean {\r\n        return this.tags.first.model === item;\r\n    }\r\n\r\n    /**\r\n     * @name isLastTag\r\n     * @param item {TagModel}\r\n     */\r\n    private isLastTag(item: TagModel): boolean {\r\n        return this.tags.last.model === item;\r\n    }\r\n\r\n    /**\r\n     * @name getTagIndex\r\n     * @param item\r\n     */\r\n    private getTagIndex(item: TagModel): number {\r\n        const tags = this.tags.toArray();\r\n\r\n        return tags.findIndex(tag => tag.model === item);\r\n    }\r\n\r\n    /**\r\n     * @name getTagAtIndex\r\n     * @param index\r\n     */\r\n    private getTagAtIndex(index: number) {\r\n        const tags = this.tags.toArray();\r\n\r\n        return tags[index];\r\n    }\r\n\r\n    /**\r\n     * @name removeItem\r\n     * @desc removes an item from the array of the model\r\n     * @param tag {TagModel}\r\n     * @param index {number}\r\n     */\r\n    public removeItem(tag: TagModel, index: number): void {\r\n        this.items = this.getItemsWithout(index);\r\n\r\n        // if the removed tag was selected, set it as undefined\r\n        if (this.selectedTag === tag) {\r\n            this.selectItem(undefined, false);\r\n        }\r\n\r\n        // focus input\r\n        this.focus(true, false);\r\n\r\n        // emit remove event\r\n        this.onRemove.emit(tag);\r\n    }\r\n\r\n    /**\r\n     * @name addItem\r\n     * @desc adds the current text model to the items array\r\n     * @param fromAutocomplete {boolean}\r\n     * @param item {TagModel}\r\n     * @param index? {number}\r\n     * @param giveupFocus? {boolean}\r\n     */\r\n    private addItem(fromAutocomplete = false, item: TagModel, index?: number, giveupFocus?: boolean):\r\n        Promise<TagModel> {\r\n        const display = this.getItemDisplay(item);\r\n        const tag = this.createTag(item);\r\n\r\n        if (fromAutocomplete) {\r\n            this.setInputValue(this.getItemValue(item, true));\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            /**\r\n             * @name reset\r\n             */\r\n            const reset = (): void => {\r\n                // reset control and focus input\r\n                this.setInputValue('');\r\n\r\n                if (giveupFocus) {\r\n                    this.focus(false, false);\r\n                } else {\r\n                    // focus input\r\n                    this.focus(true, false);\r\n                }\r\n\r\n                resolve(display);\r\n            };\r\n\r\n            const appendItem = (): void => {\r\n                this.appendTag(tag, index);\r\n\r\n                // emit event\r\n                this.onAdd.emit(tag);\r\n\r\n                if (!this.dropdown) {\r\n                    return;\r\n                }\r\n\r\n                this.dropdown.hide();\r\n\r\n                if (this.dropdown.showDropdownIfEmpty) {\r\n                    this.dropdown.show();\r\n                }\r\n            };\r\n\r\n            const status = this.inputForm.form.status;\r\n            const isTagValid = this.isTagValid(tag, fromAutocomplete);\r\n\r\n            const onValidationError = () => {\r\n                this.onValidationError.emit(tag);\r\n                return reject();\r\n            };\r\n\r\n            if (status === 'VALID' && isTagValid) {\r\n                appendItem();\r\n                return reset();\r\n            }\r\n\r\n            if (status === 'INVALID' || !isTagValid) {\r\n                reset();\r\n                return onValidationError();\r\n            }\r\n\r\n            if (status === 'PENDING') {\r\n                const statusUpdate$ = this.inputForm.form.statusChanges;\r\n\r\n                return statusUpdate$\r\n                    .pipe(\r\n                        filter(statusUpdate => statusUpdate !== 'PENDING'),\r\n                        first()\r\n                    )\r\n                    .subscribe((statusUpdate) => {\r\n                        if (statusUpdate === 'VALID' && isTagValid) {\r\n                            appendItem();\r\n                            return reset();\r\n                        } else {\r\n                            reset();\r\n                            return onValidationError();\r\n                        }\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @name setupSeparatorKeysListener\r\n     */\r\n    private setupSeparatorKeysListener(): void {\r\n        const useSeparatorKeys = this.separatorKeyCodes.length > 0 || this.separatorKeys.length > 0;\r\n        const listener = ($event) => {\r\n            const hasKeyCode = this.separatorKeyCodes.indexOf($event.keyCode) >= 0;\r\n            const hasKey = this.separatorKeys.indexOf($event.key) >= 0;\r\n            // the keyCode of keydown event is 229 when IME is processing the key event.\r\n            const isIMEProcessing = $event.keyCode === 229;\r\n\r\n            if (hasKeyCode || (hasKey && !isIMEProcessing)) {\r\n                $event.preventDefault();\r\n                this.onAddingRequested(false, this.formValue)\r\n                    .catch(() => { });\r\n            }\r\n        };\r\n\r\n        listen.call(this, constants.KEYDOWN, listener, useSeparatorKeys);\r\n    }\r\n\r\n    /**\r\n     * @name setUpKeypressListeners\r\n     */\r\n    private setUpKeypressListeners(): void {\r\n        const listener = ($event) => {\r\n            const isCorrectKey = $event.keyCode === 37 || $event.keyCode === 8;\r\n\r\n            if (isCorrectKey &&\r\n                !this.formValue &&\r\n                this.items.length) {\r\n                this.tags.last.select.call(this.tags.last);\r\n            }\r\n        };\r\n\r\n        // setting up the keypress listeners\r\n        listen.call(this, constants.KEYDOWN, listener);\r\n    }\r\n\r\n    /**\r\n     * @name setUpKeydownListeners\r\n     */\r\n    private setUpInputKeydownListeners(): void {\r\n        this.inputForm.onKeydown.subscribe(event => {\r\n            if (event.key === 'Backspace' && this.formValue.trim() === '') {\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @name setUpOnPasteListener\r\n     */\r\n    private setUpOnPasteListener() {\r\n        const input = this.inputForm.input.nativeElement;\r\n\r\n        // attach listener to input\r\n        this.renderer.listen(input, 'paste', (event) => {\r\n            this.onPasteCallback(event);\r\n\r\n            event.preventDefault();\r\n            return true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @name setUpTextChangeSubscriber\r\n     */\r\n    private setUpTextChangeSubscriber(): void {\r\n        this.inputForm.form\r\n            .valueChanges\r\n            .pipe(\r\n                debounceTime(this.onTextChangeDebounce)\r\n            )\r\n            .subscribe((value: { item: string }) => {\r\n                this.onTextChange.emit(value.item);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @name setUpOnBlurSubscriber\r\n     */\r\n    private setUpOnBlurSubscriber(): void {\r\n        const filterFn = (): boolean => {\r\n            const isVisible = this.dropdown && this.dropdown.isVisible;\r\n            return !isVisible && !!this.formValue;\r\n        };\r\n\r\n        this.inputForm\r\n            .onBlur\r\n            .pipe(\r\n                debounceTime(100),\r\n                filter(filterFn)\r\n            )\r\n            .subscribe(() => {\r\n                const reset = () => this.setInputValue('');\r\n\r\n                if (this.addOnBlur) {\r\n                    return this\r\n                        .onAddingRequested(false, this.formValue, undefined, true)\r\n                        .then(reset)\r\n                        .catch(reset);\r\n                }\r\n\r\n                reset();\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @name findDupe\r\n     * @param tag\r\n     * @param isFromAutocomplete\r\n     */\r\n    private findDupe(tag: TagModel, isFromAutocomplete: boolean): TagModel | undefined {\r\n        const identifyBy = isFromAutocomplete ? this.dropdown.identifyBy : this.identifyBy;\r\n        const id = tag[identifyBy];\r\n\r\n        return this.items.find(item => this.getItemValue(item) === id);\r\n    }\r\n\r\n    /**\r\n     * @name onPasteCallback\r\n     * @param data\r\n     */\r\n    private onPasteCallback = async (data: ClipboardEvent) => {\r\n        interface IEWindow extends Window {\r\n            clipboardData: DataTransfer;\r\n        }\r\n\r\n        const getText = (): string => {\r\n            const isIE = Boolean((window as IEWindow).clipboardData);\r\n            const clipboardData = isIE ? (\r\n                (window as IEWindow).clipboardData\r\n            ) : data.clipboardData;\r\n            const type = isIE ? 'Text' : 'text/plain';\r\n            return clipboardData === null ? '' : clipboardData.getData(type) || '';\r\n        };\r\n\r\n        const text = getText();\r\n\r\n        const requests = text\r\n            .split(this.pasteSplitPattern)\r\n            .map(item => {\r\n                const tag = this.createTag(item);\r\n                this.setInputValue(tag[this.displayBy]);\r\n                return this.onAddingRequested(false, tag);\r\n            });\r\n\r\n        const resetInput = () => setTimeout(() => this.setInputValue(''), 50);\r\n\r\n        Promise.all(requests).then(() => {\r\n            this.onPaste.emit(text);\r\n            resetInput();\r\n        })\r\n            .catch(resetInput);\r\n    }\r\n\r\n    /**\r\n     * @name setAnimationMetadata\r\n     */\r\n    private setAnimationMetadata(): void {\r\n        this.animationMetadata = {\r\n            value: 'in',\r\n            params: { ...this.animationDuration }\r\n        };\r\n    }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'delete-icon',\r\n    templateUrl: './icon.html',\r\n    styleUrls: ['./icon.scss']\r\n})\r\nexport class DeleteIconComponent {}\r\n","import { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule, FormsModule, COMPOSITION_BUFFER_MODE } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Ng2DropdownModule } from 'ng2-material-dropdown';\r\nimport { HighlightPipe } from './core/pipes/highlight.pipe';\r\nimport { DragProvider } from './core/providers/drag-provider';\r\nimport { OptionsProvider, Options } from './core/providers/options-provider';\r\nimport { TagInputComponent } from './components/tag-input/tag-input';\r\nimport { DeleteIconComponent } from './components/icon/icon';\r\nimport { TagInputForm } from './components/tag-input-form/tag-input-form.component';\r\nimport { TagComponent } from './components/tag/tag.component';\r\nimport { TagInputDropdown } from './components/dropdown/tag-input-dropdown.component';\r\nimport { TagRipple } from './components/tag/tag-ripple.component';\r\n\r\nconst optionsProvider = new OptionsProvider();\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        FormsModule,\r\n        Ng2DropdownModule\r\n    ],\r\n    declarations: [\r\n        TagInputComponent,\r\n        DeleteIconComponent,\r\n        TagInputForm,\r\n        TagComponent,\r\n        HighlightPipe,\r\n        TagInputDropdown,\r\n        TagRipple\r\n    ],\r\n    exports: [\r\n        TagInputComponent,\r\n        DeleteIconComponent,\r\n        TagInputForm,\r\n        TagComponent,\r\n        HighlightPipe,\r\n        TagInputDropdown,\r\n        TagRipple\r\n    ],\r\n    providers: [\r\n        DragProvider,\r\n        { provide: COMPOSITION_BUFFER_MODE, useValue: false },\r\n    ]\r\n})\r\nexport class TagInputModule {\r\n    /**\r\n     * @name withDefaults\r\n     * @param options {Options}\r\n     */\r\n    public static withDefaults(options: Options): void {\r\n        optionsProvider.setOptions(options);\r\n    }\r\n}\r\n"]}